{"version":3,"sources":["../src/index.js"],"names":["PORT","process","env","app","get","req","res","send","post","console","log","models","User","create","username","email","password","newUser","findAll","then","users","use","status","json","error","err","next","url","sequelize","sync","listen"],"mappings":";;;;;;;;AAAA;;AACA;;AACA,IAAMA,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC;AAEA,IAAMG,GAAG,GAAG,0BAAZ;AAEAA,GAAG,CAACC,GAAJ,CAAQ,GAAR;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAa,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AACXA,YAAAA,GAAG,CAACC,IAAJ,CAAS,iBAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAb;;AAAA;AAAA;AAAA;AAAA;AAIAJ,GAAG,CAACK,IAAJ,CAAS,SAAT;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAoB,kBAAOH,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBG,YAAAA,OAAO,CAACC,GAAR,CAAYL,GAAZ;AADkB;AAAA;AAAA,mBAGEM,mBAAOC,IAAP,CAAYC,MAAZ,CAAmB;AACrCC,cAAAA,QAAQ,EAAET,GAAG,CAACS,QADuB;AAErCC,cAAAA,KAAK,EAAEV,GAAG,CAACU,KAF0B;AAGrCC,cAAAA,QAAQ,EAAEX,GAAG,CAACW;AAHuB,aAAnB,CAHF;;AAAA;AAGbC,YAAAA,OAHa;AAQlBX,YAAAA,GAAG,CAACC,IAAJ,CAASU,OAAT;AARkB;AAAA;;AAAA;AAAA;AAAA;AAUhBR,YAAAA,OAAO,CAACC,GAAR;;AAVgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA;AAaAP,GAAG,CAACC,GAAJ,CAAQ,MAAR,EAAgB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACjCK,qBAAOC,IAAP,CAAYM,OAAZ,CAAoB,EAApB,EACGC,IADH,CACQ,UAASC,KAAT,EAAgB;AACtBd,IAAAA,GAAG,CAACC,IAAJ,CAASa,KAAT;AACD,GAHD;AAID,CALD;AAOAjB,GAAG,CAACkB,GAAJ,CAAQ,GAAR,EAAa,UAAChB,GAAD,EAAMC,GAAN,EAAc;AACzBA,EAAAA,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBD,IAAAA,MAAM,EAAE,GADW;AAEnBE,IAAAA,KAAK,EAAE;AAFY,GAArB;AAID,CALD;AAOArB,GAAG,CAACkB,GAAJ,CAAQ,UAACI,GAAD,EAAMpB,GAAN,EAAWC,GAAX,EAAgBoB,IAAhB,EAAyB;AAC/B,MAAI,CAACD,GAAL,EAAU,OAAOC,IAAI,EAAX;AACV,SAAOpB,GAAG,CAACgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BD,IAAAA,MAAM,EAAE,GADkB;AAE1BE,IAAAA,KAAK,oCAA6BnB,GAAG,CAACsB,GAAjC;AAFqB,GAArB,CAAP;AAID,CAND,E,CAOA;;AACAhB,mBAAOiB,SAAP,CAAiBC,IAAjB,GAAwBV,IAAxB,CAA6B,YAAM;AAClChB,EAAAA,GAAG,CAAC2B,MAAJ,CAAW9B,IAAX,EAAiB,YAAM;AACrBS,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CV,IAA9C;AACD,GAFD;AAGA,CAJD","sourcesContent":["import express from \"express\";\nimport models from './models'\nconst PORT = process.env.PORT || 3000;\n\nconst app = express();\n\napp.get(\"/\", async (req, res) => {\n  res.send('Hello world Mac')\n});\n\napp.post(\"/create\", async (req, res)  => {\n  console.log(req); \n  try {\n const newUser =await models.User.create({\n    username: req.username,\n    email: req.email,\n    password: req.password\n  });\n  res.send(newUser);\n  } catch (err) {\n    console.log(err)\n  }\n});\napp.get(\"/all\", function(req, res) {\n  models.User.findAll({\n  }).then(function(users) {\n    res.send(users);\n  });\n});\n\napp.use(\"*\", (req, res) => {\n  res.status(404).json({\n    status: 404,\n    error: \"Sorry, we couldn't find that!\"\n  });\n});\n\napp.use((err, req, res, next) => {\n  if (!err) return next();\n  return res.status(400).json({\n    status: 400,\n    error: `Failed to decode param: ${req.url}`\n  });\n});\n// sync() will create all table if they doesn't exist in database\nmodels.sequelize.sync().then(() => {\n app.listen(PORT, () => {\n   console.log(\"Started at http://localhost:%d\", PORT);\n });\n});\n \n"],"file":"index.js"}